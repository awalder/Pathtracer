#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding = 2, set = 0) uniform cameraProperties
{
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 modelIT;
    mat4 viewInverse;
    mat4 projInverse;
}
cam;

layout(location = 0) rayPayloadNV vec3 hitValue;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    mat4 invP = cam.viewInverse * cam.projInverse;

    vec4 p0 = vec4(d.xy, 0.0, 1.0);
    vec4 p1 = vec4(d.xy, 1.0, 1.0);

    vec4 Roh = invP * p0;
    vec3 Ro  = vec4(Roh * (1.0 / Roh.w)).xyz;
    vec4 Rdh = invP * p1;
    vec3 Rd  = vec4(Rdh * (1.0 / Rdh.w)).xyz;

    Rd = Rd - Ro;

    //vec4 origin    = cam.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
    //vec4 target    = cam.projInverse * vec4(d.xy, 1.0, 1.0);
    //vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0.0);

    uint  rayFlags = gl_RayFlagsOpaqueNV;
    uint  cullMask = 0xff;
    float tmin     = 0.000001;
    float tmax     = 1.0;

    traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, Ro, tmin, Rd, tmax, 0);
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 0.0));
}