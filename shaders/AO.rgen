#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require


layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding = 2, set = 0) uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 modelIT;
    //mat4 viewInverse;
    //mat4 projInverse;
    mat4 viewProjInverse;

    mat4 lightTransform;

    vec2 lightSize;
    vec2 pad0;

    vec3  lightE;
    float pad1;

    int   numIndirectBounces;
    int   samplesPerPixel;
    float lightSourceArea;
    float lightOtherE;

    int   numAOrays;
    float aoRayLength;
}
ubo;

layout(binding = 3, set = 0) buffer Vertices
{
    vec4 v[];
}
vertices;

layout(binding = 4, set = 0) buffer Indices
{
    uint i[];
}
indices;

layout(binding = 7, set = 0) uniform sampler2DArray scrambleSampler;
layout(binding = 8, set = 0) buffer SobolMatrices
{
    uint sm[];
}
sobolMatrices;

struct RayPayload
{
    vec3 hitAttribs;
    uint primitiveID;
};

layout(location = 0) rayPayloadNV RayPayload payload;
layout(location = 2) rayPayloadNV bool isShadowed;

// ----------------------------------------------------------------------------
//
//

#define M_PI 3.141592653589
#define M_2PI 2.0 * M_PI
#define INV_PI 1.0 / M_PI

struct Vertex
{
    vec3 pos;
    vec3 normal;
    vec2 texCoord;
    vec3 color;
    int  matIndex;
};
// Number of vec4 values used to represent a vertex
uint vertexSize = 3;

Vertex unpackVertex(uint index)
{
    Vertex v;

    vec4 d0 = vertices.v[vertexSize * index + 0];
    vec4 d1 = vertices.v[vertexSize * index + 1];
    vec4 d2 = vertices.v[vertexSize * index + 2];

    v.pos      = d0.xyz;
    v.normal   = vec3(d0.w, d1.x, d1.y);
    v.texCoord = vec2(d1.z, d1.w);
    v.color    = vec3(d2.x, d2.y, d2.z);
    v.matIndex = floatBitsToInt(d2.w);
    return v;
}

mat3 formBasis(vec3 n)
{
    mat3 R;
    vec3 T, B;
    if(n.z < -0.9999999f)
    {
        T = vec3(0.0, -1.0, 0.0);
        B = vec3(-1.0, 0.0, 0.0);
    }
    else
    {
        const float a = 1.0f / (1.0f + n.z);
        const float b = -n.x * n.y * a;
        T             = vec3(1.0f - n.x * n.x * a, b, -n.x);
        B             = vec3(b, 1.0f - n.y * n.y * a, -n.y);
    }

    R[0] = T;
    R[1] = B;
    R[2] = n;
    return R;
}

// ----------------------------------------------------------------------------
//
//

float sobol1DSample(uint index, const uint dimension, const uint scramble)
{
    // These values are from the sobol implementation from sobol.h/cpp
    const uint dimensions = 1024;
    const uint size       = 52;

    uint result = scramble;
    for(uint i = dimension * size; index != 0; index >>= 1, ++i)
    {
        if(uint(index & 1) == 1)
            result = result ^ sobolMatrices.sm[i];
    }

    //return result * (1.0 / (uint(1) << 32));
    return result * 0.00000000023283064;
}

// ----------------------------------------------------------------------------
//
//

// Cosine weighed hemisphere sample based on shirley-chiu mapping
vec3 hemisphereSample(uint index, uvec2 scramble)
{
    vec2 s;
    for(int d = 0; d < 2; ++d)
    {
        s[d] = sobol1DSample(index, d, scramble[d]);
    }

    float       phi, r;
    const float a = 2.0 * s.x - 1.0;
    const float b = 2.0 * s.y - 1.0;

    if(a * a > b * b)
    {
        r   = a;
        phi = M_PI * 0.25 * (b / a);
    }
    else
    {
        r   = b;
        phi = M_PI * 0.5 - M_PI * 0.25 * (a / b);
    }

    float x = r * cos(phi);
    float y = r * sin(phi);
    float z = sqrt(max(0.0, 1.0 - x * x - y * y));

    return vec3(x, y, z);
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    mat4 invP = ubo.viewProjInverse;
    //mat4 invP = ubo.viewInverse * ubo.projInverse;

    vec4 p0 = vec4(d.xy, 0.0, 1.0);
    vec4 p1 = vec4(d.xy, 1.0, 1.0);

    vec4 Roh = invP * p0;
    vec3 Ro  = vec4(Roh * (1.0 / Roh.w)).xyz;
    vec4 Rdh = invP * p1;
    vec3 Rd  = vec4(Rdh * (1.0 / Rdh.w)).xyz;

    Rd = Rd - Ro;

    uint  rayFlags = gl_RayFlagsOpaqueNV;
    uint  cullMask = 0xff;
    float tmin     = 0.00001;
    float tmax     = 1.0;

    // Test if primary ray hits scene
    traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, Ro, tmin, Rd, tmax, 0);
    if(payload.primitiveID == ~0u)
    {
        imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(0.1, 0.1, 0.1, 0.0));
        return;
    }

    uvec2 scramble;
    scramble[0] =
        floatBitsToUint(vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 0), 0)).r);
    scramble[1] =
        floatBitsToUint(vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 1), 0)).r);
    uint sobolIndex =
        floatBitsToUint(vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 2), 0)).r);


    ivec3 ind = ivec3(indices.i[3 * payload.primitiveID], indices.i[3 * payload.primitiveID + 1],
                      indices.i[3 * payload.primitiveID + 2]);

    Vertex v0 = unpackVertex(ind.x);
    Vertex v1 = unpackVertex(ind.y);
    Vertex v2 = unpackVertex(ind.z);

    vec3       attribs      = payload.hitAttribs;
    const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);
    vec3       normal       = normalize(v0.normal * barycentrics.x + v1.normal * barycentrics.y
                            + v2.normal * barycentrics.z);

    if(dot(normal, Rd) > 0.0)
    {
        normal *= -1.0;
    }

    mat3 ONB      = formBasis(normal);
    vec3 hitPoint = v0.pos * barycentrics.x + v1.pos * barycentrics.y + v2.pos * barycentrics.z;
    hitPoint += 0.0001 * normal;

    int aoNoHitCount = 0;
    for(int i = 0; i < ubo.numAOrays; ++i)
    {
        vec3 v = hemisphereSample(sobolIndex++, scramble);
        Rd     = normalize(ONB * v) * vec3(ubo.aoRayLength);

        isShadowed = true;
        traceNV(topLevelAS,
                gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV
                    | gl_RayFlagsSkipClosestHitShaderNV,
                0xFF, 1, 0, 1, hitPoint, tmin, Rd, tmax, 2);
        if(!isShadowed)
        {
            aoNoHitCount++;
        }
    }

    vec3 E = vec3(float(aoNoHitCount) / float(ubo.numAOrays));

    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(E, 0.0));
}