#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require


// ----------------------------------------------------------------------------
//  Binding locations
//

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba16) uniform image2D image;

layout(binding = 2, set = 0) uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 modelIT;
    mat4 viewProjInverse;

    mat4 lightTransform;

    vec2 lightSize;
    vec2 pad0;

    vec3  lightE;
    float pad1;

    int   numIndirectBounces;
    int   samplesPerPixel;
    float lightSourceArea;
    float lightOtherE;

    int   numAArays;
    float filterRadius;

    int   numAOrays;
    float aoRayLength;
    uint  iteration;

    float time;
}
ubo;

layout(binding = 3, set = 0) buffer Vertices
{
    vec4 v[];
}
vertices;

layout(binding = 4, set = 0) buffer Indices
{
    uint i[];
}
indices;

layout(binding = 5, set = 0) buffer MatColorBufferObject
{
    vec4 m[];
}
materials;

layout(binding = 6, set = 0) uniform sampler2D[] textureSamplers;

layout(binding = 7, set = 0) uniform sampler2DArray scrambleSampler;
layout(binding = 8, set = 0) buffer SobolMatrices
{
    uint sm[];
}
sobolMatrices;

// ----------------------------------------------------------------------------
//  Attribute locations
//

struct RayPayload
{
    vec3 barycentrics;
    uint primitiveID;
};

layout(location = 0) rayPayloadNV RayPayload payload;
layout(location = 2) rayPayloadNV bool isShadowed;

#define M_PI 3.141592653589
#define M_2PI 2.0 * M_PI
#define INV_PI 1.0 / M_PI


// ----------------------------------------------------------------------------
//
//

struct Vertex
{
    vec3 pos;
    vec3 normal;
    vec2 texCoord;
    vec3 color;
    int  matIndex;
};
// Number of vec4 values used to represent a vertex
uint vertexSize = 3;

Vertex unpackVertex(uint index)
{
    Vertex v;

    vec4 d0 = vertices.v[vertexSize * index + 0];
    vec4 d1 = vertices.v[vertexSize * index + 1];
    vec4 d2 = vertices.v[vertexSize * index + 2];

    v.pos      = d0.xyz;
    v.normal   = vec3(d0.w, d1.x, d1.y);
    v.texCoord = vec2(d1.z, d1.w);
    v.color    = vec3(d2.x, d2.y, d2.z);
    v.matIndex = floatBitsToInt(d2.w);
    return v;
}

// ----------------------------------------------------------------------------
//
//

struct WaveFrontMaterial
{
    vec3  ambient;
    vec3  diffuse;
    vec3  specular;
    vec3  transmittance;
    vec3  emission;
    float shininess;
    float ior;       // index of refraction
    float dissolve;  // 1 == opaque; 0 == fully transparent
    int   illum;     // illumination model (see http://www.fileformat.info/format/material/)
    int   diffuseTextureId;
    int   specularTextureId;
    vec3  pad;
};
// Number of vec4 values used to represent a material
const int sizeofMat = 6;

WaveFrontMaterial unpackMaterial(int matIndex)
{
    WaveFrontMaterial m;
    vec4              d0 = materials.m[sizeofMat * matIndex + 0];
    vec4              d1 = materials.m[sizeofMat * matIndex + 1];
    vec4              d2 = materials.m[sizeofMat * matIndex + 2];
    vec4              d3 = materials.m[sizeofMat * matIndex + 3];
    vec4              d4 = materials.m[sizeofMat * matIndex + 4];
    vec4              d5 = materials.m[sizeofMat * matIndex + 5];

    m.ambient           = vec3(d0.x, d0.y, d0.z);
    m.diffuse           = vec3(d0.w, d1.x, d1.y);
    m.specular          = vec3(d1.z, d1.w, d2.x);
    m.transmittance     = vec3(d2.y, d2.z, d2.w);
    m.emission          = vec3(d3.x, d3.y, d3.z);
    m.shininess         = d3.w;
    m.ior               = d4.x;
    m.dissolve          = d4.y;
    m.illum             = int(d4.z);
    m.diffuseTextureId  = floatBitsToInt(d4.w);
    m.specularTextureId = floatBitsToInt(d5.x);
    return m;
}


// ----------------------------------------------------------------------------
//
//

mat3 formBasis(vec3 n)
{
    mat3 R;
    vec3 T, B;
    if(n.z < -0.9999999f)
    {
        T = vec3(0.0, -1.0, 0.0);
        B = vec3(-1.0, 0.0, 0.0);
    }
    else
    {
        const float a = 1.0f / (1.0f + n.z);
        const float b = -n.x * n.y * a;
        T             = vec3(1.0f - n.x * n.x * a, b, -n.x);
        B             = vec3(b, 1.0f - n.y * n.y * a, -n.y);
    }

    R[0] = T;
    R[1] = B;
    R[2] = n;
    return R;
}

// ----------------------------------------------------------------------------
//
//
vec3 localToWorld(const vec3 v, const vec3 normal)
{
    return formBasis(normal) * v;
}

// ----------------------------------------------------------------------------
//
//

float maxcoord(vec3 v)
{
    return max(max(v.x, v.y), v.z);
}

// ----------------------------------------------------------------------------
//
//

float sobol1DSample(uint index, const uint dimension, const uint scramble)
{
    // These values are from the sobol implementation from sobol.h/cpp
    const uint dimensions = 1024;
    const uint size       = 52;

    uint result = scramble;
    for(uint i = dimension * size; index != 0; index >>= 1, ++i)
    {
        if(uint(index & 1) == 1)
            result ^= sobolMatrices.sm[i];
    }

    //return result * (1.0 / (uint(1) << 32));
    return result * 2.3283064365386963e-10;
}

// ----------------------------------------------------------------------------
//
//

// Cosine weighed hemisphere sample based on shirley-chiu mapping
vec3 hemisphereSample(uint index, uvec2 scramble)
{
    vec2 s;
    for(int d = 0; d < 2; ++d)
    {
        s[d] = sobol1DSample(index, d, scramble[d]);
    }

    float       phi, r;
    const float a = 2.0 * s.x - 1.0;
    const float b = 2.0 * s.y - 1.0;

    if(a * a > b * b)
    {
        r   = a;
        phi = M_PI * 0.25 * (b / a);
    }
    else
    {
        r   = b;
        phi = M_PI * 0.5 - M_PI * 0.25 * (a / b);
    }

    float x = r * cos(phi);
    float y = r * sin(phi);
    float z = sqrt(max(0.0, 1.0 - x * x - y * y));

    return vec3(x, y, z);
}

// ----------------------------------------------------------------------------
//
//

vec3 hemisphereSample2(vec2 s)
{
    float       phi, r;
    const float a = 2.0 * s.x - 1.0;
    const float b = 2.0 * s.y - 1.0;

    if(a * a > b * b)
    {
        r   = a;
        phi = M_PI * 0.25 * (b / a);
    }
    else
    {
        r   = b;
        phi = M_PI * 0.5 - M_PI * 0.25 * (a / b);
    }

    float x = r * cos(phi);
    float y = r * sin(phi);
    float z = sqrt(max(0.0, 1.0 - x * x - y * y));

    return vec3(x, y, z);
}

// ----------------------------------------------------------------------------
//
//

void sampleLight(inout float pdf, inout vec3 p, vec2 prng)
{
    pdf      = 1.0 / (4.0 * ubo.lightSize.x * ubo.lightSize.y);
    vec2 pos = (prng * vec2(2.0) - vec2(1.0)) * ubo.lightSize;
    p        = vec4(ubo.lightTransform * vec4(pos.xy, 0.0, 1.0)).xyz;
}

// ----------------------------------------------------------------------------
//
//

float rand(vec2 co)
{
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

// ----------------------------------------------------------------------------
//  Cook - Torrance BSDF
//  DFG / (4 * dot(Wi, n) * dot(Wo, n)
//


float GGX_chi(float v)
{
    return v > 0.0 ? 1.0 : 0.0;
}

float GGX_Distribution(vec3 wm, vec3 wn, float alpha)
{
    //float a2     = alpha * alpha;
    //float MdotN  = dot(wm, wn);
    //float MdotN2 = MdotN * MdotN;
    //float chi    = GGX_chi(MdotN);

    //float tan2Theta   = (1.0 - MdotN2) / MdotN2;
    //float denom = M_PI * MdotN2 * MdotN2 * pow(a2 * tan2Theta, 2.0);

    //return chi * a2 / denom;


    //float denom  = MdotN2 * a2 + (1.0 - MdotN2);
    //float denom  = M_PI * pow(MdotN2 * (a2 - 1.0) + 1.0, 2.0);
    //return chi * a2 / (M_PI * denom * denom);

    //float alpha2 = alpha * alpha;

    //float MdotN = dot(wm, wn);
    //float chi   = GGX_chi(MdotN);

    //float cosTheta = MdotN;
    //float tanTheta = sqrt(1.0 - cosTheta * cosTheta) / cosTheta;

    //float denom = M_PI * pow(cosTheta, 4.0) * pow(alpha2 + tanTheta * tanTheta, 2.0);
    //return chi * alpha2 / denom;

    float a2    = alpha * alpha;
    float MdotN = dot(wm, wn);
    float chi   = GGX_chi(MdotN);
    float cos2  = MdotN * MdotN;
    float tan2  = (1.0 - cos2) / cos2;

    float denom = M_PI * pow(MdotN, 4.0) * pow(a2 + tan2, 2.0);
    return chi * a2 / denom;
}

float GGX_G1(vec3 wv, vec3 wm, vec3 wn, float alpha)
{
    float a2    = alpha * alpha;
    float VdotM = dot(wv, wm);
    float VdotN = dot(wv, wn);

    float VdotM2 = VdotM * VdotM;
    float tan2   = (1.0 - VdotM2) / VdotM2;

    float chi   = GGX_chi(VdotM / VdotN);
    float denom = 1.0 + sqrt(1.0 + a2 * tan2);

    return chi * 2.0 / denom;
}

float GGX_Geometry(vec3 wi, vec3 wo, vec3 wm, vec3 wn, float alpha)
{
    return GGX_G1(wi, wm, wn, alpha) * GGX_G1(wo, wm, wn, alpha);
}

float GGX_Fresnel(vec3 wo, vec3 wm, float etaA, float etaB)
{
    float OdotM = max(dot(wo, wm), 0.0);
    float eta   = etaA / etaB;
    float eta2  = eta * eta;

    float beta = sqrt(1.0 / eta2 + OdotM * OdotM - 1.0);

    // In case of total internal reflection, set F = 1.0
    if(beta < 0.0)
    {
        return 1.0;
    }

    float Rs = pow((OdotM - beta) / (OdotM + beta), 2.0);
    float Rp = pow((eta2 * beta - OdotM) / (eta2 * beta + OdotM), 2.0);

    return 0.5 * (Rs + Rp);
}

vec3 GGX_Sample(vec2 rnd, float alpha)
{
    float theta = atan(alpha * sqrt(rnd.x) / sqrt(1.0 - rnd.x));
    float phi   = M_2PI * rnd.y;

    float x = sin(theta) * cos(phi);
    float y = sin(theta) * sin(phi);
    float z = cos(theta);

    return vec3(x, y, z);
}

vec3 GGX_Sample2(vec2 rnd, float alpha)
{
    float a2    = alpha * alpha;
    float theta = acos(sqrt((1.0 - rnd.x) / ((a2 - 1.0) * rnd.x + 1.0)));
    float phi   = 2.0 * M_PI * rnd.y;

    float x = sin(theta) * cos(phi);
    float y = sin(theta) * sin(phi);
    float z = cos(theta);

    return vec3(x, y, z);
}

float GGX_PDF(vec3 wm, vec3 wn, float alpha)
{
    //float a2       = alpha * alpha;
    //float cosTheta = abs(dot(m, n));
    //float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    //float denom    = M_PI * pow((cosTheta * cosTheta * (a2 - 1.0) + 1.0), 2.0);
    //return a2 * sinTheta * cosTheta / denom;

    float D     = GGX_Distribution(wm, wn, alpha);
    float MdotN = dot(wm, wn);
    return D * abs(MdotN);
}

float GGX_Eval(vec3 wi, vec3 wo, vec3 wm, vec3 wn, float alpha, float etaA, float etaB)
{
    //i = normalize(i);
    //o = normalize(o);
    //m = normalize(m);

    float D = GGX_Distribution(wm, wn, alpha);
    float G = GGX_Geometry(wi, wo, wm, wn, alpha);
    float F = GGX_Fresnel(wo, wm, etaA, etaB);

    float IdotN = abs(dot(wi, wn));
    float OdotN = abs(dot(wo, wn));

    return D * G * F / (4.0 * IdotN * OdotN);
}
// ----------------------------------------------------------------------------
//
//
float GGX_SmithMasking(vec3 wi, vec3 wo, float alpha)
{
    float a2 = alpha * alpha;
    float NdotL = wi.z;
    float NdotV = wo.z;
    float denom = sqrt(a2 + (1.0 - a2) * NdotV * NdotV) + NdotV;

    return 2.0 * NdotV / denom;
}

float GGX_SmithMaskingShadowing(vec3 wi, vec3 wo, float alpha)
{
    float a2 = alpha * alpha;
    float NdotL = wi.z;
    float NdotV = wo.z;

    float denomA = NdotV * sqrt(a2 + (1.0 - a2) * NdotL * NdotL);
    float denomB = NdotL * sqrt(a2 + (1.0 - a2) * NdotV * NdotV);

    return 2.0 * NdotL * NdotV / (denomA + denomB);
}

vec3 GGX_SampleVNDF(vec3 wo, float alpha, vec2 rnd)
{
    vec3 v = normalize(vec3(wo.x * alpha, wo.y * alpha, wo.z));

    vec3 t1 = (v.z < 0.9999) ? normalize(cross(v, vec3(0, 0, 1))) : vec3(1, 0, 0);
    vec3 t2 = cross(t1, v);

    float a = 1.0 / (1.0 + v.z);
    float r = sqrt(rnd.x);
    float phi = (rnd.y < a) ? rnd.y / a * M_PI : M_PI + (rnd.y - a) / (1.0 - a) * M_PI;
    float p1  = r * cos(phi);
    float p2  = r * sin(phi) * ((rnd.y < a) ? 1.0 : v.z);

    vec3 n = p1 * t1 + p2 * t2 + sqrt(max(0.0, 1.0 - p1 * t1 - p2 * t2)) * v;

    n = normalize(vec3(alpha * n.x, alpha * n.y, max(0.0, n.z)));
    return n;
}

//vec3 GGX_ImportanceSampleVNDF(vec3)


// ----------------------------------------------------------------------------
//
//

struct Ray
{
    vec3 origin;
    vec3 dir;
};

Ray getPrimaryRay(vec2 var)
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + var;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    mat4 invP = ubo.viewProjInverse;

    // Point on front plane in homogeneous coordinates
    vec4 p0 = vec4(d.xy, 0.0, 1.0);
    // Point on back plane in homogeneous coordinates
    vec4 p1 = vec4(d.xy, 1.0, 1.0);

    // apply inverse projection, divide by w to get object-space points
    vec4 Roh = invP * p0;
    vec3 Ro  = vec4(Roh * (1.0 / Roh.w)).xyz;
    vec4 Rdh = invP * p1;
    vec3 Rd  = vec4(Rdh * (1.0 / Rdh.w)).xyz;

    // Subtract front plane from back plane
    Rd = Rd - Ro;

    Ray ray;
    ray.origin = Ro;
    ray.dir    = Rd;
    return ray;
}

float getGaussianWeight(vec2 offset, float stdDev)
{
    const float f = 1.0 / (stdDev * sqrt(2.0 * M_PI));
    return f * exp(-0.5 * (offset.y * offset.y + offset.x * offset.x) / (stdDev * stdDev));
}

float mitchellNetrevali(float v)
{
    // B + 2*C = 1
    const float B = 1.0 / 3.0;
    const float C = 1.0 / 3.0;
    float       k = 0.0;
    if(v < 1.0)
    {
        return ((12.0 - 9.0 * B - 6.0 * C) * pow(v, 3.0)
                + (-18.0 + 12.0 * B + 6.0 * C) * pow(v, 2.0) + (6.0 - 2.0 * B))
               / 6.0;
    }
    else
    {
        return ((-B - 6.0 * C) * pow(v, 3.0) + (6.0 * B + 30.0 * C) * pow(v, 2.0)
                + (-12.0 * B - 48.0 * C) * v + (8.0 * B + 24.0 * C))
               / 6.0;
    }
}

float getMitchellWeight(vec2 offset)
{
    return mitchellNetrevali(offset.x) * mitchellNetrevali(offset.y);
}

vec2 nextSquareSample(uint index, inout uint dim, uvec2 scramble)
{
    vec2 s;
    s[0] = sobol1DSample(index, dim++, scramble[0]);
    s[1] = sobol1DSample(index, dim++, scramble[1]);
    return s;
}

// ----------------------------------------------------------------------------
//
//

vec3 GGX_ImportanceSample(uvec2 scramble, vec3 wo, vec3 normal)
{
    return vec3(1.0);
}

// ----------------------------------------------------------------------------
//
//

void main()
{

    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);

    uint sobolIndex =
        floatBitsToUint(vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 0), 0)).r);
    sobolIndex /= 2;

    sobolIndex += ubo.iteration;
    uint sobolDim = 0;

    // scrambleSampler holds 32-layer texture array containing random uint values
    uvec2 scrambleArray[16];
    for(int i = 0; i < 16; i++)
    {
        scrambleArray[i][0] = floatBitsToUint(
            vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 2 * i + 0), 0)).r);
        scrambleArray[i][1] = floatBitsToUint(
            vec4(texelFetch(scrambleSampler, ivec3(gl_LaunchIDNV.xy, 2 * i + 1), 0)).r);
    }

    const float tmin       = 0.000001;
    const float tmax       = 1.0;
    const uint  rayFlags   = gl_RayFlagsOpaqueNV;
    const uint  cullMask   = 0xff;
    const int   maxBounces = ubo.numIndirectBounces;
    vec4        E          = vec4(0.0);

    if(ubo.iteration > 1)
    {
        E = imageLoad(image, ivec2(gl_LaunchIDNV.xy));
    }

    for(int aaRay = 0; aaRay < ubo.numAArays; ++aaRay)
    {
        Ray ray;

        vec2  rayOffset          = vec2(0.5);
        vec3  throughput         = vec3(1.0);
        float p                  = 1.0;
        int   bounce             = 0;
        uint  scrambleArrayLayer = 1;
        sobolDim                 = 2;
        float radius             = ubo.filterRadius;

        if(ubo.numAArays == 1)
        {
            ray = getPrimaryRay(vec2(0.5));
        }
        else
        {
            //do
            {
                rayOffset = nextSquareSample(sobolIndex, sobolDim, scrambleArray[0]);
                //rayOffset = rayOffset * vec2(2.0) - vec2(1.0);
                //rayOffset *= radius;
            }
            //} while(rayOffset.x * rayOffset.x + rayOffset.y * rayOffset.y < radius * radius);

            ray = getPrimaryRay(rayOffset);
        }

        vec3 Ro = ray.origin;
        vec3 Rd = ray.dir;

        traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, Ro, tmin, Rd, tmax, 0);
        if(payload.primitiveID == ~0u)
        {
            imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(inUV, 0.4, 0.0));
            return;
        }

        while(true)
        {
            uint  primitiveID  = payload.primitiveID;
            vec3  barycentrics = payload.barycentrics;
            uvec2 scramble     = scrambleArray[scrambleArrayLayer++];

            ivec3 ind = ivec3(indices.i[3 * primitiveID], indices.i[3 * primitiveID + 1],
                              indices.i[3 * primitiveID + 2]);

            Vertex v0 = unpackVertex(ind.x);
            Vertex v1 = unpackVertex(ind.y);
            Vertex v2 = unpackVertex(ind.z);

            WaveFrontMaterial mat = unpackMaterial(v1.matIndex);

            // Shading normal
            vec3 sNormal = normalize(v0.normal * barycentrics.x + v1.normal * barycentrics.y
                                     + v2.normal * barycentrics.z);

            // Geometric normal
            vec3 gNormal = normalize(cross(v2.pos - v0.pos, v1.pos - v0.pos));
            if(dot(sNormal, Rd) > 0.0)
            {
                sNormal = -sNormal;
            }

            if(dot(sNormal, gNormal) < 0.0)
            {
                gNormal = -gNormal;
            }

            vec3 hitPoint =
                v0.pos * barycentrics.x + v1.pos * barycentrics.y + v2.pos * barycentrics.z;

            // Get color data
            vec3 diffuse  = mat.diffuse;
            vec3 specular = mat.specular;

            if(mat.diffuseTextureId >= 0)
            {
                vec2 texCoord = v0.texCoord * barycentrics.x + v1.texCoord * barycentrics.y
                                + v2.texCoord * barycentrics.z;
                diffuse *= texture(textureSamplers[mat.diffuseTextureId], texCoord).xyz;
            }
            if(mat.specularTextureId >= 0)
            {
                vec2 texCoord = v0.texCoord * barycentrics.x + v1.texCoord * barycentrics.y
                                + v2.texCoord * barycentrics.z;
                specular *= texture(textureSamplers[mat.specularTextureId], texCoord).xyz;
            }

            {
                float max = maxcoord(diffuse + specular);
                if(max > 1.0f)
                {
                    diffuse /= vec3(max);
                    specular /= vec3(max);
                }
            }

            // costheta between surface normal and previous ray direction
            float cosTheta_yi = clamp(dot(normalize(-Rd), sNormal), 0.0, 1.0);

            float pdf;
            vec3  lightSamplePos;
            {  // Sample light
                vec2 s = nextSquareSample(sobolIndex, sobolDim, scramble);
                sampleLight(pdf, lightSamplePos, s);
            }

            const vec3 vLight = lightSamplePos - hitPoint;

            const float roughness = clamp(1.0 - mat.shininess, 0.001, 1.0);
            float       alpha     = roughness * roughness;
            alpha                 = float(ubo.numAOrays) / 256.0;

            vec3 Ei = vec3(0.0);

            // Trace shadowray to lightsource, invokes shadowmiss kernel
            isShadowed = true;
            traceNV(topLevelAS,
                    gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV
                        | gl_RayFlagsSkipClosestHitShaderNV,
                    0xFF, 1, 0, 1, hitPoint, tmin, vLight, tmax, 2);

            if(!isShadowed)
            {
                const vec3  lightNormal = -normalize(vec4(ubo.lightTransform[2]).xyz);
                const float r           = length(vLight);

                // Angle between light surface and vLight vector
                const float cosTheta_light = clamp(dot(normalize(-vLight), lightNormal), 0.0, 1.0);

                // Angle between hit surface and light vector
                const float cosTheta_surface = clamp(dot(sNormal, normalize(vLight)), 0.0, 1.0);

                // Half vector between raydir and vLight
                vec3 wm = normalize(-Rd + vLight);
                vec3 wo = normalize(-Rd);
                vec3 wi = normalize(vLight);
                //if(dot(wm, sNormal) < 0.0)
                //{
                //    wm = -wm;
                //}
                float brdf = GGX_Eval(-Rd, vLight, wm, sNormal, alpha, 1.0, 1.5);

                float D = GGX_Distribution(wm, sNormal, alpha);
                float G = GGX_Geometry(wi, wo, wm, sNormal, alpha);
                float F = GGX_Fresnel(wo, wm, 1.0, 1.5);

                E = vec4(vec3(G), 1.0);
                break;

                if(!(brdf <= 0.0 || brdf > 0.0))
                {
                    //Ei.xyz = vec3(1e6, 0, 1e6);
                }
                else
                {
                    Ei += ubo.lightE * cosTheta_light * cosTheta_surface / (r * r * pdf);
                    Ei *= vec3(brdf) * throughput;
                }
            }


            const vec3 wo = normalize(-Rd);
            const mat3 B  = formBasis(sNormal);

            vec3 wi = vec3(0.0);
            vec3 wm = vec3(0.0);

            {
                bool breakout = false;
                int  count    = 0;
                do
                {
                    vec2 rnd = nextSquareSample(sobolIndex, sobolDim, scramble);
                    wm       = normalize(B * GGX_Sample2(rnd, alpha));

                    count++;
                    if(count >= 15)
                    {
                        breakout = true;
                        break;
                    }
                } while(dot(wo, wm) <= 0.0);
                if(breakout)
                {
                    break;
                }

                wi = normalize(reflect(-wo, wm));
            }

            float specularBRDF = GGX_Eval(wi, wo, wm, sNormal, alpha, 1.0, 1.33);
            float ggxPDF       = GGX_PDF(wm, sNormal, alpha) / (4.0 * abs(dot(wo, wm)));

            //ggxPDF = clamp(ggxPDF, 0.1, 10);

            float D = GGX_Distribution(wm, sNormal, alpha);
            float G = GGX_Geometry(wi, wo, wm, sNormal, alpha);
            float F = GGX_Fresnel(wo, wm, 1.0, 1.5);

            //float VdotM = dot(wi, wm);
            //float VdotN = dot(wi, sNormal);


            //float tt = abs(G);
            //E = vec4(vec3(tt), 1.0);
            //break;

            Ro = hitPoint;
            Rd = wi * vec3(100.0);

            //const vec3 vI_refl   = reflect(vIncident, sNormal);
            //const mat3 B         = formBasis(vI_refl);

            //{
            //    bool breakout = false;
            //    int  count    = 0;
            //    do
            //    {
            //        vec2 rnd = nextSquareSample(sobolIndex, sobolDim, scramble);
            //        vExitent = GGX_Sample(rnd, alpha2);
            //        vExitent = normalize(B * vExitent) * vec3(100.0);
            //        count++;
            //        if(count >= 5)
            //        {
            //            breakout = true;
            //            break;
            //        }
            //    } while(dot(vExitent, gNormal) < 0.0);

            //    if(breakout)
            //    {
            //        break;
            //    }
            //}

            //const vec3 vHalf  = normalize(vIncident + vExitent);

            //vec3 iRefl = reflect(i, normal);
            //mat3 B     = formBasis(iRefl);

            //for(int k = 0; k < 25; ++k)
            //{
            //    o        = GGX_Sample(rnd, alpha2);
            //    o        = normalize(B * o) * vec3(100.0);
            //    if(dot(o, normal) > 0.0)
            //    {
            //        break;
            //    }
            //}

            //if(true)
            //{
            //    float a2       = alpha2;
            //    float cosTheta = dot(vHalf, sNormal);
            //    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
            //    float denom    = M_PI * pow((cosTheta * cosTheta * (a2 - 1.0) + 1.0), 2.0);
            //    //Ei = vec3(1e6, 0, 1e6);
            //    float res = clamp(a2 * cosTheta / denom, 0.0001, 1.0);
            //    //E = vec4(vec3(res), 1.0);
            //    //E = vec4(vec3(dot(vHalf, sNormal)), 1.0);
            //    //break;
            //}

            //float specularBRDF = GGX_PDF(m, normal, alpha2);
            //float specularBRDF = GyyGX_Eval(vIncident, vExitent, vHalf, gNormal, alpha2, 1.0, 1.33);


            const vec3 diffuseBRDF = diffuse * INV_PI;
            vec4       color       = vec4(diffuseBRDF + specular * specularBRDF, 1.0);

            // -----------------------
            // Filtering
            if(ubo.numAArays != 1)
            {
                //float weight = getMitchellWeight((rayOffset + vec2(0.5)) * vec2(ubo.filterRadius));
                //color *= vec4(weight);
            }

            // -----------------------
            // Accumulate
            //Ei += mat.emission * ubo.lightOtherE;
            //Ei *= throughput * color.xyz;

            E += vec4(Ei, color.w);

            float cosTheta = clamp(dot(normalize(Rd), sNormal), 0.00001, 1.0);
            p              = cosTheta * INV_PI;
            //p              = ggxPDF;
            if(!(p < 0.0 || p >= 0.0))  // Test if NaN
            {
                //E.xyz = vec3(1e6, 0, 1e6);
                break;
            }
            if(p == 0.0)
            {
                //E.xyz = vec3(1e0, 1e6, 1e0);
                break;
            }
            throughput *= color.xyz * cosTheta / p;

            bounce++;
            if(bounce > maxBounces)
            {
                break;
            }

            traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, Ro, tmin, Rd, tmax, 0);
            if(payload.primitiveID == ~0u)
            {
                break;
            }
        }

        sobolIndex++;
    }

    imageStore(image, ivec2(gl_LaunchIDNV.xy), E);
    //imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color, E.w));
}